{"ast":null,"code":"import _objectSpread from \"/Users/keenanberry/Development/industry/my-app/kantarClean/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/keenanberry/Development/industry/my-app/kantarClean/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/keenanberry/Development/industry/my-app/kantarClean/src/components/UploadForm.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField'; //import Fab from '@material-ui/core/Fab';\n\nimport Button from '@material-ui/core/Button'; //import CloudUploadIcon from '@material-ui/icons/CloudUpload';\n//import NavigationIcon from '@material-ui/icons/Navigation';\n\nconst dataTypes = [{\n  value: 'indication',\n  label: 'Indication'\n}, {\n  value: 'drug',\n  label: 'Drug'\n}];\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1)\n  },\n  menu: {\n    width: 200\n  }\n}));\nexport default function UploadForm() {\n  const classes = useStyles();\n  const fileInput = React.createRef();\n\n  const _React$useState = React.useState({\n    file: null,\n    data: '',\n    number: ''\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        values = _React$useState2[0],\n        setValues = _React$useState2[1]; // functions to handle state changes\n  // file must end in .xlsx or .xls\n  // data must be selected (1 of 2 options)\n  // number must be between 1 and 50\n  // with all in check the submit button can go ahead and send inputs to store\n  // file will be saved in public/uploads\n\n\n  const handleChange = name => event => {\n    setValues(_objectSpread({}, values, {\n      [name]: event.target.value\n    }));\n  }; // onSubmit should trigger the input event\n  // something like this...\n  // e.preventDefault();\n  // let file= values['file']\n  // console.warn('this is the file:', file)\n  // let reader= new FileReader();\n  // reader.readAsDataURL(file);\n  // reader.onload= (e) => {\n  //   console.warn(\"binary data: \", reader.result)\n  // }\n\n\n  function handleSubmit() {\n    if (values['file']) {\n      values['file'] = fileInput.current.files[0];\n      console.log(values);\n      alert('File submitted!');\n      fetch('http://localhost:3000/upload', {\n        method: 'POST',\n        body: values\n      }); // }).then((response) => {\n      //   response.json().then((body) => {\n      //   })\n      // })\n    } else {\n      alert('Please upload a file!');\n    }\n  } // clear form on click and on enter\n  // pass input values to store on click and on enter\n  // save uploaded file on click and on enter\n  // should I use fetch or axios\n\n\n  return React.createElement(\"form\", {\n    id: \"upload-form\",\n    className: classes.container,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    component: \"label\",\n    color: \"default\",\n    className: useStyles.button,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"file\",\n    ref: fileInput,\n    accept: \".xlsx,.xls\",\n    onChange: handleChange('file') // style={{ display: \"None\" }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"\\xA0\"), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Now select the file type and enter the number of existing database entries you would like to compare your unclean entries to (value must range between 1 and 50).\"), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"outlined-select-currency\",\n    select: true,\n    label: \"Select\",\n    className: classes.textField,\n    value: values.data,\n    onChange: handleChange('data'),\n    SelectProps: {\n      MenuProps: {\n        className: classes.menu\n      }\n    },\n    helperText: \"Please select the file type\",\n    margin: \"normal\",\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, dataTypes.map(option => React.createElement(MenuItem, {\n    key: option.value,\n    value: option.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, option.label))), React.createElement(TextField, {\n    id: \"outlined-number\",\n    label: \"Number\",\n    value: values.number,\n    onChange: handleChange('number'),\n    type: \"number\",\n    className: classes.textField,\n    InputLabelProps: {\n      shrink: true\n    },\n    margin: \"normal\",\n    variant: \"outlined\",\n    inputProps: {\n      min: \"1\",\n      max: \"50\",\n      step: \"1\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(Button, {\n    form: \"upload-form\",\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    fullWidth: true,\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Submit\"))));\n}","map":{"version":3,"sources":["/Users/keenanberry/Development/industry/my-app/kantarClean/src/components/UploadForm.js"],"names":["React","makeStyles","MenuItem","TextField","Button","dataTypes","value","label","useStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","menu","width","UploadForm","classes","fileInput","createRef","useState","file","data","number","values","setValues","handleChange","name","event","target","handleSubmit","current","files","console","log","alert","fetch","method","body","button","MenuProps","className","map","option","shrink","min","max","step"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\n//import Fab from '@material-ui/core/Fab';\r\nimport Button from '@material-ui/core/Button';\r\n//import CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\n//import NavigationIcon from '@material-ui/icons/Navigation';\r\n\r\nconst dataTypes = [\r\n    {\r\n        value: 'indication',\r\n        label: 'Indication',\r\n    },\r\n    {\r\n        value: 'drug',\r\n        label: 'Drug',\r\n    },\r\n]; \r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n}));\r\n\r\nexport default function UploadForm() {\r\n  const classes = useStyles();\r\n  const fileInput = React.createRef();\r\n  const [values, setValues] = React.useState({\r\n    file: null,\r\n    data: '',\r\n    number: '',\r\n  });\r\n\r\n  // functions to handle state changes\r\n  // file must end in .xlsx or .xls\r\n  // data must be selected (1 of 2 options)\r\n  // number must be between 1 and 50\r\n  // with all in check the submit button can go ahead and send inputs to store\r\n    // file will be saved in public/uploads\r\n\r\n  const handleChange = name => event => {\r\n    setValues({ ...values, [name]: event.target.value });\r\n  };\r\n\r\n  // onSubmit should trigger the input event\r\n  // something like this...\r\n\r\n  // e.preventDefault();\r\n  // let file= values['file']\r\n  // console.warn('this is the file:', file)\r\n  // let reader= new FileReader();\r\n  // reader.readAsDataURL(file);\r\n\r\n  // reader.onload= (e) => {\r\n  //   console.warn(\"binary data: \", reader.result)\r\n  // }\r\n\r\n  function handleSubmit() {\r\n    if (values['file']) {\r\n      values['file'] = fileInput.current.files[0];\r\n      \r\n      console.log(values)\r\n      alert('File submitted!')\r\n  \r\n      fetch('http://localhost:3000/upload', {\r\n        method: 'POST',\r\n        body: values,\r\n      }) \r\n      // }).then((response) => {\r\n      //   response.json().then((body) => {\r\n\r\n      //   })\r\n      // })\r\n    } else {\r\n      alert('Please upload a file!')\r\n    }\r\n  }\r\n\r\n  // clear form on click and on enter\r\n  // pass input values to store on click and on enter\r\n  // save uploaded file on click and on enter\r\n      // should I use fetch or axios\r\n\r\n  return (\r\n    <form id=\"upload-form\" className={classes.container} noValidate autoComplete=\"off\">\r\n      <div className=\"container\">\r\n        <div  className=\"row\">\r\n          <Button variant=\"contained\" component=\"label\" color=\"default\" className={useStyles.button}>\r\n            {/* Upload &nbsp;\r\n            <CloudUploadIcon className={useStyles.rightIcon} /> */}\r\n            <input\r\n              type=\"file\"\r\n              ref={fileInput}\r\n              accept=\".xlsx,.xls\"\r\n              onChange={handleChange('file')}\r\n              // style={{ display: \"None\" }}\r\n            />\r\n          </Button>\r\n        </div>\r\n        <div className=\"row\">&nbsp;</div>\r\n        <div className=\"row\">\r\n          Now select the file type and enter the number of existing database entries you would \r\n          like to compare your unclean entries to (value must range between 1 and 50).\r\n        </div>\r\n        <div className=\"row\">\r\n          <TextField\r\n            id=\"outlined-select-currency\"\r\n            select\r\n            label=\"Select\"\r\n            className={classes.textField}\r\n            value={values.data}\r\n            onChange={handleChange('data')}\r\n            SelectProps={{\r\n              MenuProps: {\r\n                className: classes.menu,\r\n              },\r\n            }}\r\n            helperText=\"Please select the file type\"\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n          >\r\n            {dataTypes.map(option => (\r\n              <MenuItem key={option.value} value={option.value}>\r\n                {option.label}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n          <TextField\r\n            id=\"outlined-number\"\r\n            label=\"Number\"\r\n            value={values.number}\r\n            onChange={handleChange('number')}\r\n            type=\"number\"\r\n            className={classes.textField}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            margin=\"normal\"\r\n            variant=\"outlined\"\r\n            inputProps={{ min: \"1\", max: \"50\", step: \"1\" }}\r\n          />\r\n        </div>\r\n        <div className=\"row\">\r\n          <Button form=\"upload-form\" type=\"submit\" variant=\"contained\" color=\"primary\" fullWidth={true} onClick={handleSubmit}>\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}