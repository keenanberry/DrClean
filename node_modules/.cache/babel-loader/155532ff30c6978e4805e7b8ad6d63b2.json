{"ast":null,"code":"import _slicedToArray from \"/Users/keenanberry/Development/industry/my-app/kantarClean/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/keenanberry/Development/industry/my-app/kantarClean/src/components/RecommendationTable.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { lighten, withStyles, makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport PropTypes from 'prop-types'; // autosuggest options (https://material-ui.com/components/autocomplete/)\n\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.text.disabled,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\n\nfunction createData(id, support, tumor, subtype) {\n  return {\n    id,\n    support,\n    tumor,\n    subtype\n  };\n}\n\nconst headerRow = ['Existing Database Entries', 'Tumor Type', 'Tumor Subtype'];\nconst metaData = {\n  condition: 'Acute Lymphoblastic Leukemia (ALL) and Lymphoblastic Lymphoma',\n  condNumber: '(1 of 256)',\n  label: 'ALL',\n  labelNumber: '(1 of 7)'\n};\nconst rows = [createData(0, ['Acute Lymphoblastic Leukemia (ALL)/T Lymphoblastic Lymphoma', '1)Acute Lymphoblastic Leukemia2) Lymphoblastic Lymphoma', 'Acute Lymphoblastic Leukemia and Lymphoblastic Lymphoma'], 'ALL', ''), createData(1, ['Acute Lymphoblastic Lymphoma'], 'Lymphoma', 'B-Cell Lymphoma'), createData(2, ['Lymphoma, Acute Lymphoblastic Leukemia'], 'Lymphoma', ''), createData(3, [React.createElement(\"strong\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}, \"Other\")], React.createElement(TextField, {\n  id: \"outlined-dense\",\n  label: \"Enter tumor type\" //className={clsx(useStyles.textField, useStyles.dense)}\n  ,\n  margin: \"dense\",\n  variant: \"outlined\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53\n  },\n  __self: this\n}), React.createElement(TextField, {\n  id: \"outlined-dense\",\n  label: \"Enter tumor type\" //className={clsx(useStyles.textField, useStyles.dense)}\n  ,\n  margin: \"dense\",\n  variant: \"outlined\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n}))];\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '80%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto'\n  },\n  table: {\n    minWidth: 650\n  },\n  head: {\n    color: theme.palette.primary.main\n  },\n  foot: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.common.white\n  },\n  textField: {\n    marginLeft: theme.spacing(0),\n    marginRight: theme.spacing(1)\n  },\n  dense: {\n    marginTop: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(1),\n    backgroundColor: 'orange',\n    color: theme.palette.common.white\n  }\n}));\nexport default function RecommendationTable() {\n  const classes = useStyles();\n\n  const _React$useState = React.useState([]),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        selected = _React$useState2[0],\n        setSelected = _React$useState2[1]; // const [cleaned, setCleaned] = React.useState({\n  //   condition: metaData['condition'],\n  //   tumor: '',\n  //   subtype: '',\n  // });\n  // function handleTextChange(e, id, name) {\n  // }\n  // const handleChange = name => event => {\n  //   setValues({ ...values, [name]: event.target.value });\n  // };\n  // function handleTextClick(e, id) {\n  // }\n\n\n  const otherRow = createData(rows.length, [React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Other\")], React.createElement(TextField, {\n    id: \"outlined-dense\",\n    label: \"Enter tumor type\",\n    className: clsx(useStyles.textField, useStyles.dense),\n    margin: \"dense\",\n    variant: \"outlined\" //onClick must be added as well\n    ,\n    onChange: event => handleClick(event, rows.length, 'tumor'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    id: \"outlined-dense\",\n    label: \"Enter tumor subtype\",\n    className: clsx(useStyles.textField, useStyles.dense),\n    margin: \"dense\",\n    variant: \"outlined\",\n    onChange: event => handleClick(event, rows.length, 'subtype'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }));\n\n  function pushRows(e) {\n    const pushedIndex = rows.length;\n    let newPushed = [];\n    rows.push(otherRow);\n    newPushed = newPushed.concat(selected, pushedIndex);\n    setSelected(newPushed);\n  }\n\n  function handleClick(event, id) {\n    const selectedIndex = selected.indexOf(id);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, id);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\n    }\n\n    setSelected(newSelected);\n  } // use function to handle textfield changes\n  // const handleChange = name => event => {\n  //   setValues({ ...values, [name]: event.target.value });\n  // };\n\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    if (selected.length) {\n      //const cleanedEntries = selected.map((row) => rows[row].tumor)\n      console.log(selected);\n    } else {\n      alert('You must make a selection.');\n    }\n  }\n\n  const isSelected = id => selected.indexOf(id) !== -1;\n\n  return React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    justify: \"center\",\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Condition \", metaData.condNumber), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }), React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, \"\\xA0\"), React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, \"Possible \", React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, metaData.label), \" \", metaData.labelNumber, \" : \"), React.createElement(Typography, {\n    variant: \"h6\",\n    component: \"h2\",\n    className: classes.head,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, metaData.condition)), React.createElement(Typography, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }, \"\\xA0\"), React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(StyledTableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, headerRow[0]), React.createElement(StyledTableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, headerRow[1]), React.createElement(StyledTableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, headerRow[2]), React.createElement(StyledTableCell, {\n    align: \"left\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"\\xA0\"))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }, rows.map((row, index) => {\n    const isItemSelected = isSelected(row.id);\n    const labelId = \"table-checkbox-\".concat(index);\n    return React.createElement(TableRow, {\n      hover: true,\n      onClick: event => handleClick(event, row.id),\n      role: \"checkbox\",\n      \"aria-checked\": isItemSelected,\n      tabIndex: -1,\n      key: row.id,\n      selected: isItemSelected,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(TableCell, {\n      scope: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(Table, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(TableBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, row.support.map(sup => React.createElement(TableRow, {\n      key: sup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, sup))))), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, row.tumor), React.createElement(TableCell, {\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, row.subtype), React.createElement(TableCell, {\n      padding: \"checkbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(Checkbox, {\n      checked: isItemSelected,\n      inputProps: {\n        'aria-labelledby': labelId\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    })));\n  })), React.createElement(TableFooter, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"contained\",\n    component: \"span\",\n    className: classes.foot,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, \"Back\"), React.createElement(Button, {\n    variant: \"contained\",\n    component: \"span\",\n    className: classes.button,\n    onClick: pushRows,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, \"Add Other\")), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265\n    },\n    __self: this\n  }), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }), React.createElement(TableCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    component: \"span\",\n    className: classes.foot,\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268\n    },\n    __self: this\n  }, \"Next\")))))));\n}","map":{"version":3,"sources":["/Users/keenanberry/Development/industry/my-app/kantarClean/src/components/RecommendationTable.js"],"names":["React","clsx","lighten","withStyles","makeStyles","Table","TableBody","TableCell","TableHead","Toolbar","TableFooter","TableRow","Paper","Grid","Typography","Divider","TextField","Button","Checkbox","PropTypes","StyledTableCell","theme","head","backgroundColor","palette","text","disabled","color","common","white","body","fontSize","createData","id","support","tumor","subtype","headerRow","metaData","condition","condNumber","label","labelNumber","rows","useStyles","root","width","marginTop","spacing","overflowX","table","minWidth","primary","main","foot","margin","textField","marginLeft","marginRight","dense","button","RecommendationTable","classes","useState","selected","setSelected","otherRow","length","event","handleClick","pushRows","e","pushedIndex","newPushed","push","concat","selectedIndex","indexOf","newSelected","slice","handleSubmit","preventDefault","console","log","alert","isSelected","map","row","index","isItemSelected","labelId","sup"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { lighten, withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport PropTypes from 'prop-types';\r\n// autosuggest options (https://material-ui.com/components/autocomplete/)\r\n\r\nconst StyledTableCell = withStyles(theme => ({\r\n  head: {\r\n    backgroundColor: theme.palette.text.disabled,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\n\r\nfunction createData(id, support, tumor, subtype) {\r\n  return { id, support, tumor, subtype };\r\n}\r\n\r\nconst headerRow = ['Existing Database Entries', 'Tumor Type', 'Tumor Subtype']; \r\n\r\nconst metaData = {\r\n  condition: 'Acute Lymphoblastic Leukemia (ALL) and Lymphoblastic Lymphoma',\r\n  condNumber: '(1 of 256)',\r\n  label: 'ALL',\r\n  labelNumber: '(1 of 7)'\r\n}\r\n\r\nconst rows = [\r\n  createData(0, ['Acute Lymphoblastic Leukemia (ALL)/T Lymphoblastic Lymphoma',\r\n  '1)Acute Lymphoblastic Leukemia2) Lymphoblastic Lymphoma',\r\n  'Acute Lymphoblastic Leukemia and Lymphoblastic Lymphoma'], \r\n  'ALL', ''),\r\n  createData(1, ['Acute Lymphoblastic Lymphoma'], 'Lymphoma', 'B-Cell Lymphoma'),\r\n  createData(2, ['Lymphoma, Acute Lymphoblastic Leukemia'], 'Lymphoma', ''),\r\n  createData(3, [<strong>Other</strong>],\r\n    <TextField\r\n      id=\"outlined-dense\"\r\n      label=\"Enter tumor type\"\r\n      //className={clsx(useStyles.textField, useStyles.dense)}\r\n      margin=\"dense\"\r\n      variant=\"outlined\"                  \r\n    />,\r\n    <TextField\r\n      id=\"outlined-dense\"\r\n      label=\"Enter tumor type\"\r\n      //className={clsx(useStyles.textField, useStyles.dense)}\r\n      margin=\"dense\"\r\n      variant=\"outlined\"                  \r\n    />\r\n  )\r\n];\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '80%',\r\n    marginTop: theme.spacing(3),\r\n    overflowX: 'auto',\r\n  },\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  head: {\r\n    color: theme.palette.primary.main,\r\n  },\r\n  foot: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.primary.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(0),\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  dense: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: 'orange',\r\n    color: theme.palette.common.white,\r\n  },\r\n}));\r\n\r\n\r\nexport default function RecommendationTable() {\r\n  const classes = useStyles();\r\n  const [selected, setSelected] = React.useState([]);\r\n\r\n  // const [cleaned, setCleaned] = React.useState({\r\n  //   condition: metaData['condition'],\r\n  //   tumor: '',\r\n  //   subtype: '',\r\n  // });\r\n\r\n\r\n  // function handleTextChange(e, id, name) {\r\n\r\n  // }\r\n\r\n  // const handleChange = name => event => {\r\n  //   setValues({ ...values, [name]: event.target.value });\r\n  // };\r\n\r\n  // function handleTextClick(e, id) {\r\n\r\n  // }\r\n\r\n  const otherRow = createData(rows.length, [<strong>Other</strong>],\r\n    <TextField\r\n      id=\"outlined-dense\"\r\n      label=\"Enter tumor type\"\r\n      className={clsx(useStyles.textField, useStyles.dense)}\r\n      margin=\"dense\"\r\n      variant=\"outlined\"\r\n      //onClick must be added as well\r\n      onChange={event => handleClick(event, rows.length, 'tumor')}                 \r\n    />,\r\n    <TextField\r\n      id=\"outlined-dense\"\r\n      label=\"Enter tumor subtype\"\r\n      className={clsx(useStyles.textField, useStyles.dense)}\r\n      margin=\"dense\"\r\n      variant=\"outlined\"\r\n      onChange={event => handleClick(event, rows.length, 'subtype')}                   \r\n    />\r\n  )\r\n\r\n  function pushRows(e) {\r\n    const pushedIndex = rows.length\r\n    let newPushed = [];\r\n    rows.push(otherRow)\r\n    newPushed = newPushed.concat(selected, pushedIndex)\r\n\r\n    setSelected(newPushed);\r\n  }\r\n\r\n  function handleClick(event, id) {\r\n    const selectedIndex = selected.indexOf(id);\r\n    let newSelected = [];\r\n  \r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, id);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n  \r\n    setSelected(newSelected);\r\n  }\r\n\r\n  // use function to handle textfield changes\r\n  // const handleChange = name => event => {\r\n  //   setValues({ ...values, [name]: event.target.value });\r\n  // };\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault()\r\n    if(selected.length) {\r\n      //const cleanedEntries = selected.map((row) => rows[row].tumor)\r\n      console.log(selected)\r\n    }else {\r\n      alert('You must make a selection.')\r\n    }\r\n  }\r\n\r\n  const isSelected = id => selected.indexOf(id) !== -1;\r\n\r\n  return (\r\n    <Grid\r\n    container\r\n    direction=\"column\"\r\n    justify=\"center\"\r\n    alignItems=\"center\"\r\n    >\r\n      <Paper className={classes.root}>\r\n      <Typography variant=\"h5\" component=\"h2\">Condition {metaData.condNumber}</Typography>\r\n      <Divider />\r\n      <Typography>&nbsp;</Typography>\r\n      <Typography variant=\"h6\" component=\"h2\">Possible <strong>{metaData.label}</strong> {metaData.labelNumber} : </Typography>\r\n      <Typography variant=\"h6\" component=\"h2\" className={classes.head}><strong>{metaData.condition}</strong>\r\n      {/* <Button variant=\"contained\" component=\"span\" className={classes.button}>\r\n        Duplicate\r\n      </Button> */}\r\n      </Typography>\r\n      <Typography>&nbsp;</Typography>\r\n        {/* <EnhancedTableToolbar numSelected={selected.length} /> */}\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell align=\"left\">{headerRow[0]}</StyledTableCell>\r\n              <StyledTableCell align=\"left\">{headerRow[1]}</StyledTableCell>\r\n              <StyledTableCell align=\"left\">{headerRow[2]}</StyledTableCell>\r\n              <StyledTableCell align=\"left\">&nbsp;</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id);\r\n                const labelId = `table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow \r\n                    hover\r\n                    onClick={event => handleClick(event, row.id)}\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell scope=\"row\">\r\n                      <Table>\r\n                        <TableBody>\r\n                          {row.support.map((sup) =>\r\n                            <TableRow key={sup}>{sup}</TableRow>\r\n                          )}\r\n                        </TableBody>\r\n                      </Table>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{row.tumor}</TableCell>\r\n                    <TableCell align=\"left\">{row.subtype}</TableCell>\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={isItemSelected}\r\n                        inputProps={{ 'aria-labelledby': labelId}}/>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n            })}\r\n          </TableBody>\r\n          <TableFooter>\r\n            <TableRow>\r\n              <TableCell>\r\n                <Button variant=\"contained\" component=\"span\" className={classes.foot}>\r\n                  Back\r\n                </Button>\r\n                <Button variant=\"contained\" component=\"span\" className={classes.button} onClick={pushRows}>\r\n                  Add Other\r\n                </Button>\r\n              </TableCell>\r\n              <TableCell></TableCell>\r\n              <TableCell></TableCell>\r\n              <TableCell>\r\n                <Button type=\"submit\" variant=\"contained\" component=\"span\" className={classes.foot} onClick={handleSubmit}>\r\n                  Next\r\n                </Button>\r\n              </TableCell>\r\n            </TableRow>\r\n          </TableFooter>\r\n        </Table>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n} "]},"metadata":{},"sourceType":"module"}